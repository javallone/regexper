/**
 * Canopy -- a JavaScript parser compiler
 * ======================================
 * 
 * http://github.com/jcoglan/canopy
 * 
 * Copyright (c) 2010-2012 James Coglan
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the 'Software'), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 **/

var Canopy = {};

Canopy.extend = function(destination, source) {
    if (!destination || !source) return destination;
    for (var key in source) {
      if (destination[key] !== source[key])
        destination[key] = source[key];
    }
    return destination;
  };

Canopy.extend(Canopy, {
  compile: function(grammar) {
    var compiler = new this.Compiler(grammar),
        source   = compiler.toSource();
    
    eval(source);
    return source;
  },
  
  find: function(root, objectName) {
    var parts = objectName.split('.'),
        part;
    
    while (part = parts.shift()) {
      root = root[part];
      if (root === undefined)
        throw new Error('Cannot find object named ' + objectName);
    }
    return root;
  },
  
  forEach: function(list, block, context) {
    for (var i = 0, n = list.length; i < n; i++)
      block.call(context, list[i], i);
  },
  
  formatError: function(error) {
    var lines  = error.input.split(/\n/g),
        lineNo = 0,
        offset = 0;
    
    while (offset < error.offset + 1) {
      offset += lines[lineNo].length + 1;
      lineNo += 1;
    }
    var message = 'Line ' + lineNo + ': expected ' + error.expected + '\n',
        line    = lines[lineNo - 1];
    
    message += line + '\n';
    offset  -= line.length + 1;
    
    while (offset < error.offset) {
      message += ' ';
      offset  += 1;
    }
    return message + '^';
  }
});


(function() {
  var extend = function (destination, source) {
    if (!destination || !source) return destination;
    for (var key in source) {
      if (destination[key] !== source[key])
        destination[key] = source[key];
    }
    return destination;
  };
  
  var find = function (root, objectName) {
    var parts = objectName.split('.'),
        part;
    
    while (part = parts.shift()) {
      root = root[part];
      if (root === undefined)
        throw new Error('Cannot find object named ' + objectName);
    }
    return root;
  };
  
  var formatError = function (error) {
    var lines  = error.input.split(/\n/g),
        lineNo = 0,
        offset = 0;
    
    while (offset < error.offset + 1) {
      offset += lines[lineNo].length + 1;
      lineNo += 1;
    }
    var message = 'Line ' + lineNo + ': expected ' + error.expected + '\n',
        line    = lines[lineNo - 1];
    
    message += line + '\n';
    offset  -= line.length + 1;
    
    while (offset < error.offset) {
      message += ' ';
      offset  += 1;
    }
    return message + '^';
  };
  
  var Grammar = {
    __consume__grammar: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["grammar"] = this._nodeCache["grammar"] || {};
      var cached = this._nodeCache["grammar"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var remaining0 = 0, index2 = this._offset, elements1 = [], text1 = "", address2 = true;
      while (address2) {
        address2 = this.__consume__space();
        if (address2) {
          elements1.push(address2);
          text1 += address2.textValue;
          remaining0 -= 1;
        }
      }
      if (remaining0 <= 0) {
        this._offset = index2;
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0(text1, this._offset, elements1);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += text1.length;
      } else {
        address1 = null;
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address3 = null;
        address3 = this.__consume__grammar_name();
        if (address3) {
          elements0.push(address3);
          text0 += address3.textValue;
          labelled0.grammar_name = address3;
          var address4 = null;
          var remaining1 = 1, index3 = this._offset, elements2 = [], text2 = "", address5 = true;
          while (address5) {
            var index4 = this._offset, elements3 = [], labelled1 = {}, text3 = "";
            var address6 = null;
            var remaining2 = 0, index5 = this._offset, elements4 = [], text4 = "", address7 = true;
            while (address7) {
              address7 = this.__consume__space();
              if (address7) {
                elements4.push(address7);
                text4 += address7.textValue;
                remaining2 -= 1;
              }
            }
            if (remaining2 <= 0) {
              this._offset = index5;
              var klass1 = this.constructor.SyntaxNode;
              var type1 = null;
              address6 = new klass1(text4, this._offset, elements4);
              if (typeof type1 === "object") {
                extend(address6, type1);
              }
              this._offset += text4.length;
            } else {
              address6 = null;
            }
            if (address6) {
              elements3.push(address6);
              text3 += address6.textValue;
              var address8 = null;
              address8 = this.__consume__grammar_rule();
              if (address8) {
                elements3.push(address8);
                text3 += address8.textValue;
                labelled1.grammar_rule = address8;
              } else {
                elements3 = null;
                this._offset = index4;
              }
            } else {
              elements3 = null;
              this._offset = index4;
            }
            if (elements3) {
              this._offset = index4;
              var klass2 = this.constructor.SyntaxNode;
              var type2 = null;
              address5 = new klass2(text3, this._offset, elements3, labelled1);
              if (typeof type2 === "object") {
                extend(address5, type2);
              }
              this._offset += text3.length;
            } else {
              address5 = null;
            }
            if (address5) {
              elements2.push(address5);
              text2 += address5.textValue;
              remaining1 -= 1;
            }
          }
          if (remaining1 <= 0) {
            this._offset = index3;
            var klass3 = this.constructor.SyntaxNode;
            var type3 = null;
            address4 = new klass3(text2, this._offset, elements2);
            if (typeof type3 === "object") {
              extend(address4, type3);
            }
            this._offset += text2.length;
          } else {
            address4 = null;
          }
          if (address4) {
            elements0.push(address4);
            text0 += address4.textValue;
            labelled0.rules = address4;
            var address9 = null;
            var remaining3 = 0, index6 = this._offset, elements5 = [], text5 = "", address10 = true;
            while (address10) {
              address10 = this.__consume__space();
              if (address10) {
                elements5.push(address10);
                text5 += address10.textValue;
                remaining3 -= 1;
              }
            }
            if (remaining3 <= 0) {
              this._offset = index6;
              var klass4 = this.constructor.SyntaxNode;
              var type4 = null;
              address9 = new klass4(text5, this._offset, elements5);
              if (typeof type4 === "object") {
                extend(address9, type4);
              }
              this._offset += text5.length;
            } else {
              address9 = null;
            }
            if (address9) {
              elements0.push(address9);
              text0 += address9.textValue;
            } else {
              elements0 = null;
              this._offset = index1;
            }
          } else {
            elements0 = null;
            this._offset = index1;
          }
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass5 = this.constructor.SyntaxNode;
        var type5 = find(this.constructor, "Grammar");
        address0 = new klass5(text0, this._offset, elements0, labelled0);
        if (typeof type5 === "object") {
          extend(address0, type5);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["grammar"][index0] = address0;
    },
    __consume__grammar_name: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["grammar_name"] = this._nodeCache["grammar_name"] || {};
      var cached = this._nodeCache["grammar_name"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 8);
      } else {
        slice0 = null;
      }
      if (slice0 === "grammar ") {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0("grammar ", this._offset, []);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += 8;
      } else {
        address1 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"grammar \""};
        }
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address2 = null;
        address2 = this.__consume__object_identifier();
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          labelled0.object_identifier = address2;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass1 = this.constructor.SyntaxNode;
        var type1 = null;
        address0 = new klass1(text0, this._offset, elements0, labelled0);
        if (typeof type1 === "object") {
          extend(address0, type1);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["grammar_name"][index0] = address0;
    },
    __consume__grammar_rule: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["grammar_rule"] = this._nodeCache["grammar_rule"] || {};
      var cached = this._nodeCache["grammar_rule"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      address1 = this.__consume__identifier();
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        labelled0.identifier = address1;
        var address2 = null;
        address2 = this.__consume__assignment();
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          labelled0.assignment = address2;
          var address3 = null;
          address3 = this.__consume__parsing_expression();
          if (address3) {
            elements0.push(address3);
            text0 += address3.textValue;
            labelled0.parsing_expression = address3;
          } else {
            elements0 = null;
            this._offset = index1;
          }
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass0 = this.constructor.SyntaxNode;
        var type0 = find(this.constructor, "GrammarRule");
        address0 = new klass0(text0, this._offset, elements0, labelled0);
        if (typeof type0 === "object") {
          extend(address0, type0);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["grammar_rule"][index0] = address0;
    },
    __consume__assignment: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["assignment"] = this._nodeCache["assignment"] || {};
      var cached = this._nodeCache["assignment"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var remaining0 = 1, index2 = this._offset, elements1 = [], text1 = "", address2 = true;
      while (address2) {
        address2 = this.__consume__space();
        if (address2) {
          elements1.push(address2);
          text1 += address2.textValue;
          remaining0 -= 1;
        }
      }
      if (remaining0 <= 0) {
        this._offset = index2;
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0(text1, this._offset, elements1);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += text1.length;
      } else {
        address1 = null;
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address3 = null;
        var slice0 = null;
        if (this._input.length > this._offset) {
          slice0 = this._input.substring(this._offset, this._offset + 2);
        } else {
          slice0 = null;
        }
        if (slice0 === "<-") {
          var klass1 = this.constructor.SyntaxNode;
          var type1 = null;
          address3 = new klass1("<-", this._offset, []);
          if (typeof type1 === "object") {
            extend(address3, type1);
          }
          this._offset += 2;
        } else {
          address3 = null;
          var slice1 = null;
          if (this._input.length > this._offset) {
            slice1 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice1 = null;
          }
          if (!this.error || this.error.offset <= this._offset) {
            this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"<-\""};
          }
        }
        if (address3) {
          elements0.push(address3);
          text0 += address3.textValue;
          var address4 = null;
          var remaining1 = 1, index3 = this._offset, elements2 = [], text2 = "", address5 = true;
          while (address5) {
            address5 = this.__consume__space();
            if (address5) {
              elements2.push(address5);
              text2 += address5.textValue;
              remaining1 -= 1;
            }
          }
          if (remaining1 <= 0) {
            this._offset = index3;
            var klass2 = this.constructor.SyntaxNode;
            var type2 = null;
            address4 = new klass2(text2, this._offset, elements2);
            if (typeof type2 === "object") {
              extend(address4, type2);
            }
            this._offset += text2.length;
          } else {
            address4 = null;
          }
          if (address4) {
            elements0.push(address4);
            text0 += address4.textValue;
          } else {
            elements0 = null;
            this._offset = index1;
          }
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass3 = this.constructor.SyntaxNode;
        var type3 = null;
        address0 = new klass3(text0, this._offset, elements0, labelled0);
        if (typeof type3 === "object") {
          extend(address0, type3);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["assignment"][index0] = address0;
    },
    __consume__parsing_expression: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["parsing_expression"] = this._nodeCache["parsing_expression"] || {};
      var cached = this._nodeCache["parsing_expression"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset;
      address0 = this.__consume__choice_expression();
      if (address0) {
      } else {
        this._offset = index1;
        address0 = this.__consume__choice_part();
        if (address0) {
        } else {
          this._offset = index1;
        }
      }
      return this._nodeCache["parsing_expression"][index0] = address0;
    },
    __consume__parenthesised_expression: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["parenthesised_expression"] = this._nodeCache["parenthesised_expression"] || {};
      var cached = this._nodeCache["parenthesised_expression"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 1);
      } else {
        slice0 = null;
      }
      if (slice0 === "(") {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0("(", this._offset, []);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += 1;
      } else {
        address1 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"(\""};
        }
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address2 = null;
        var remaining0 = 0, index2 = this._offset, elements1 = [], text1 = "", address3 = true;
        while (address3) {
          address3 = this.__consume__space();
          if (address3) {
            elements1.push(address3);
            text1 += address3.textValue;
            remaining0 -= 1;
          }
        }
        if (remaining0 <= 0) {
          this._offset = index2;
          var klass1 = this.constructor.SyntaxNode;
          var type1 = null;
          address2 = new klass1(text1, this._offset, elements1);
          if (typeof type1 === "object") {
            extend(address2, type1);
          }
          this._offset += text1.length;
        } else {
          address2 = null;
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          var address4 = null;
          address4 = this.__consume__parsing_expression();
          if (address4) {
            elements0.push(address4);
            text0 += address4.textValue;
            labelled0.parsing_expression = address4;
            var address5 = null;
            var remaining1 = 0, index3 = this._offset, elements2 = [], text2 = "", address6 = true;
            while (address6) {
              address6 = this.__consume__space();
              if (address6) {
                elements2.push(address6);
                text2 += address6.textValue;
                remaining1 -= 1;
              }
            }
            if (remaining1 <= 0) {
              this._offset = index3;
              var klass2 = this.constructor.SyntaxNode;
              var type2 = null;
              address5 = new klass2(text2, this._offset, elements2);
              if (typeof type2 === "object") {
                extend(address5, type2);
              }
              this._offset += text2.length;
            } else {
              address5 = null;
            }
            if (address5) {
              elements0.push(address5);
              text0 += address5.textValue;
              var address7 = null;
              var slice2 = null;
              if (this._input.length > this._offset) {
                slice2 = this._input.substring(this._offset, this._offset + 1);
              } else {
                slice2 = null;
              }
              if (slice2 === ")") {
                var klass3 = this.constructor.SyntaxNode;
                var type3 = null;
                address7 = new klass3(")", this._offset, []);
                if (typeof type3 === "object") {
                  extend(address7, type3);
                }
                this._offset += 1;
              } else {
                address7 = null;
                var slice3 = null;
                if (this._input.length > this._offset) {
                  slice3 = this._input.substring(this._offset, this._offset + 1);
                } else {
                  slice3 = null;
                }
                if (!this.error || this.error.offset <= this._offset) {
                  this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\")\""};
                }
              }
              if (address7) {
                elements0.push(address7);
                text0 += address7.textValue;
              } else {
                elements0 = null;
                this._offset = index1;
              }
            } else {
              elements0 = null;
              this._offset = index1;
            }
          } else {
            elements0 = null;
            this._offset = index1;
          }
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass4 = this.constructor.SyntaxNode;
        var type4 = null;
        address0 = new klass4(text0, this._offset, elements0, labelled0);
        if (typeof type4 === "object") {
          extend(address0, type4);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["parenthesised_expression"][index0] = address0;
    },
    __consume__choice_expression: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["choice_expression"] = this._nodeCache["choice_expression"] || {};
      var cached = this._nodeCache["choice_expression"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      address1 = this.__consume__choice_part();
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        labelled0.first_part = address1;
        var address2 = null;
        var remaining0 = 1, index2 = this._offset, elements1 = [], text1 = "", address3 = true;
        while (address3) {
          var index3 = this._offset, elements2 = [], labelled1 = {}, text2 = "";
          var address4 = null;
          var remaining1 = 1, index4 = this._offset, elements3 = [], text3 = "", address5 = true;
          while (address5) {
            address5 = this.__consume__space();
            if (address5) {
              elements3.push(address5);
              text3 += address5.textValue;
              remaining1 -= 1;
            }
          }
          if (remaining1 <= 0) {
            this._offset = index4;
            var klass0 = this.constructor.SyntaxNode;
            var type0 = null;
            address4 = new klass0(text3, this._offset, elements3);
            if (typeof type0 === "object") {
              extend(address4, type0);
            }
            this._offset += text3.length;
          } else {
            address4 = null;
          }
          if (address4) {
            elements2.push(address4);
            text2 += address4.textValue;
            var address6 = null;
            var slice0 = null;
            if (this._input.length > this._offset) {
              slice0 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice0 = null;
            }
            if (slice0 === "/") {
              var klass1 = this.constructor.SyntaxNode;
              var type1 = null;
              address6 = new klass1("/", this._offset, []);
              if (typeof type1 === "object") {
                extend(address6, type1);
              }
              this._offset += 1;
            } else {
              address6 = null;
              var slice1 = null;
              if (this._input.length > this._offset) {
                slice1 = this._input.substring(this._offset, this._offset + 1);
              } else {
                slice1 = null;
              }
              if (!this.error || this.error.offset <= this._offset) {
                this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"/\""};
              }
            }
            if (address6) {
              elements2.push(address6);
              text2 += address6.textValue;
              var address7 = null;
              var remaining2 = 1, index5 = this._offset, elements4 = [], text4 = "", address8 = true;
              while (address8) {
                address8 = this.__consume__space();
                if (address8) {
                  elements4.push(address8);
                  text4 += address8.textValue;
                  remaining2 -= 1;
                }
              }
              if (remaining2 <= 0) {
                this._offset = index5;
                var klass2 = this.constructor.SyntaxNode;
                var type2 = null;
                address7 = new klass2(text4, this._offset, elements4);
                if (typeof type2 === "object") {
                  extend(address7, type2);
                }
                this._offset += text4.length;
              } else {
                address7 = null;
              }
              if (address7) {
                elements2.push(address7);
                text2 += address7.textValue;
                var address9 = null;
                address9 = this.__consume__choice_part();
                if (address9) {
                  elements2.push(address9);
                  text2 += address9.textValue;
                  labelled1.expression = address9;
                } else {
                  elements2 = null;
                  this._offset = index3;
                }
              } else {
                elements2 = null;
                this._offset = index3;
              }
            } else {
              elements2 = null;
              this._offset = index3;
            }
          } else {
            elements2 = null;
            this._offset = index3;
          }
          if (elements2) {
            this._offset = index3;
            var klass3 = this.constructor.SyntaxNode;
            var type3 = null;
            address3 = new klass3(text2, this._offset, elements2, labelled1);
            if (typeof type3 === "object") {
              extend(address3, type3);
            }
            this._offset += text2.length;
          } else {
            address3 = null;
          }
          if (address3) {
            elements1.push(address3);
            text1 += address3.textValue;
            remaining0 -= 1;
          }
        }
        if (remaining0 <= 0) {
          this._offset = index2;
          var klass4 = this.constructor.SyntaxNode;
          var type4 = null;
          address2 = new klass4(text1, this._offset, elements1);
          if (typeof type4 === "object") {
            extend(address2, type4);
          }
          this._offset += text1.length;
        } else {
          address2 = null;
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          labelled0.rest = address2;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass5 = this.constructor.SyntaxNode;
        var type5 = find(this.constructor, "Choice");
        address0 = new klass5(text0, this._offset, elements0, labelled0);
        if (typeof type5 === "object") {
          extend(address0, type5);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["choice_expression"][index0] = address0;
    },
    __consume__choice_part: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["choice_part"] = this._nodeCache["choice_part"] || {};
      var cached = this._nodeCache["choice_part"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var index2 = this._offset;
      address1 = this.__consume__sequence_expression();
      if (address1) {
      } else {
        this._offset = index2;
        address1 = this.__consume__sequence_part();
        if (address1) {
        } else {
          this._offset = index2;
        }
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address2 = null;
        var index3 = this._offset;
        var index4 = this._offset, elements1 = [], labelled1 = {}, text1 = "";
        var address3 = null;
        var remaining0 = 1, index5 = this._offset, elements2 = [], text2 = "", address4 = true;
        while (address4) {
          address4 = this.__consume__space();
          if (address4) {
            elements2.push(address4);
            text2 += address4.textValue;
            remaining0 -= 1;
          }
        }
        if (remaining0 <= 0) {
          this._offset = index5;
          var klass0 = this.constructor.SyntaxNode;
          var type0 = null;
          address3 = new klass0(text2, this._offset, elements2);
          if (typeof type0 === "object") {
            extend(address3, type0);
          }
          this._offset += text2.length;
        } else {
          address3 = null;
        }
        if (address3) {
          elements1.push(address3);
          text1 += address3.textValue;
          var address5 = null;
          address5 = this.__consume__type_expression();
          if (address5) {
            elements1.push(address5);
            text1 += address5.textValue;
            labelled1.type_expression = address5;
          } else {
            elements1 = null;
            this._offset = index4;
          }
        } else {
          elements1 = null;
          this._offset = index4;
        }
        if (elements1) {
          this._offset = index4;
          var klass1 = this.constructor.SyntaxNode;
          var type1 = null;
          address2 = new klass1(text1, this._offset, elements1, labelled1);
          if (typeof type1 === "object") {
            extend(address2, type1);
          }
          this._offset += text1.length;
        } else {
          address2 = null;
        }
        if (address2) {
        } else {
          this._offset = index3;
          var klass2 = this.constructor.SyntaxNode;
          var type2 = null;
          address2 = new klass2("", this._offset, []);
          if (typeof type2 === "object") {
            extend(address2, type2);
          }
          this._offset += 0;
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass3 = this.constructor.SyntaxNode;
        var type3 = find(this.constructor, "ChoicePart");
        address0 = new klass3(text0, this._offset, elements0, labelled0);
        if (typeof type3 === "object") {
          extend(address0, type3);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["choice_part"][index0] = address0;
    },
    __consume__type_expression: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["type_expression"] = this._nodeCache["type_expression"] || {};
      var cached = this._nodeCache["type_expression"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 1);
      } else {
        slice0 = null;
      }
      if (slice0 === "<") {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0("<", this._offset, []);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += 1;
      } else {
        address1 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"<\""};
        }
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address2 = null;
        address2 = this.__consume__object_identifier();
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          labelled0.object_identifier = address2;
          var address3 = null;
          var slice2 = null;
          if (this._input.length > this._offset) {
            slice2 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice2 = null;
          }
          if (slice2 === ">") {
            var klass1 = this.constructor.SyntaxNode;
            var type1 = null;
            address3 = new klass1(">", this._offset, []);
            if (typeof type1 === "object") {
              extend(address3, type1);
            }
            this._offset += 1;
          } else {
            address3 = null;
            var slice3 = null;
            if (this._input.length > this._offset) {
              slice3 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice3 = null;
            }
            if (!this.error || this.error.offset <= this._offset) {
              this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\">\""};
            }
          }
          if (address3) {
            elements0.push(address3);
            text0 += address3.textValue;
          } else {
            elements0 = null;
            this._offset = index1;
          }
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass2 = this.constructor.SyntaxNode;
        var type2 = null;
        address0 = new klass2(text0, this._offset, elements0, labelled0);
        if (typeof type2 === "object") {
          extend(address0, type2);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["type_expression"][index0] = address0;
    },
    __consume__sequence_expression: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["sequence_expression"] = this._nodeCache["sequence_expression"] || {};
      var cached = this._nodeCache["sequence_expression"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      address1 = this.__consume__sequence_part();
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        labelled0.first_part = address1;
        var address2 = null;
        var remaining0 = 1, index2 = this._offset, elements1 = [], text1 = "", address3 = true;
        while (address3) {
          var index3 = this._offset, elements2 = [], labelled1 = {}, text2 = "";
          var address4 = null;
          var remaining1 = 1, index4 = this._offset, elements3 = [], text3 = "", address5 = true;
          while (address5) {
            address5 = this.__consume__space();
            if (address5) {
              elements3.push(address5);
              text3 += address5.textValue;
              remaining1 -= 1;
            }
          }
          if (remaining1 <= 0) {
            this._offset = index4;
            var klass0 = this.constructor.SyntaxNode;
            var type0 = null;
            address4 = new klass0(text3, this._offset, elements3);
            if (typeof type0 === "object") {
              extend(address4, type0);
            }
            this._offset += text3.length;
          } else {
            address4 = null;
          }
          if (address4) {
            elements2.push(address4);
            text2 += address4.textValue;
            var address6 = null;
            address6 = this.__consume__sequence_part();
            if (address6) {
              elements2.push(address6);
              text2 += address6.textValue;
              labelled1.expression = address6;
            } else {
              elements2 = null;
              this._offset = index3;
            }
          } else {
            elements2 = null;
            this._offset = index3;
          }
          if (elements2) {
            this._offset = index3;
            var klass1 = this.constructor.SyntaxNode;
            var type1 = null;
            address3 = new klass1(text2, this._offset, elements2, labelled1);
            if (typeof type1 === "object") {
              extend(address3, type1);
            }
            this._offset += text2.length;
          } else {
            address3 = null;
          }
          if (address3) {
            elements1.push(address3);
            text1 += address3.textValue;
            remaining0 -= 1;
          }
        }
        if (remaining0 <= 0) {
          this._offset = index2;
          var klass2 = this.constructor.SyntaxNode;
          var type2 = null;
          address2 = new klass2(text1, this._offset, elements1);
          if (typeof type2 === "object") {
            extend(address2, type2);
          }
          this._offset += text1.length;
        } else {
          address2 = null;
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          labelled0.rest = address2;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass3 = this.constructor.SyntaxNode;
        var type3 = find(this.constructor, "Sequence");
        address0 = new klass3(text0, this._offset, elements0, labelled0);
        if (typeof type3 === "object") {
          extend(address0, type3);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["sequence_expression"][index0] = address0;
    },
    __consume__sequence_part: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["sequence_part"] = this._nodeCache["sequence_part"] || {};
      var cached = this._nodeCache["sequence_part"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var index2 = this._offset;
      address1 = this.__consume__label();
      if (address1) {
      } else {
        this._offset = index2;
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0("", this._offset, []);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += 0;
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address2 = null;
        var index3 = this._offset;
        address2 = this.__consume__quantified_atom();
        if (address2) {
        } else {
          this._offset = index3;
          address2 = this.__consume__atom();
          if (address2) {
          } else {
            this._offset = index3;
          }
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          labelled0.expression = address2;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass1 = this.constructor.SyntaxNode;
        var type1 = find(this.constructor, "SequencePart");
        address0 = new klass1(text0, this._offset, elements0, labelled0);
        if (typeof type1 === "object") {
          extend(address0, type1);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["sequence_part"][index0] = address0;
    },
    __consume__quantified_atom: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["quantified_atom"] = this._nodeCache["quantified_atom"] || {};
      var cached = this._nodeCache["quantified_atom"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      address1 = this.__consume__atom();
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        labelled0.atom = address1;
        var address2 = null;
        address2 = this.__consume__quantifier();
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          labelled0.quantifier = address2;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass0 = this.constructor.SyntaxNode;
        var type0 = find(this.constructor, "Repeat");
        address0 = new klass0(text0, this._offset, elements0, labelled0);
        if (typeof type0 === "object") {
          extend(address0, type0);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["quantified_atom"][index0] = address0;
    },
    __consume__atom: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["atom"] = this._nodeCache["atom"] || {};
      var cached = this._nodeCache["atom"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset;
      address0 = this.__consume__parenthesised_expression();
      if (address0) {
      } else {
        this._offset = index1;
        address0 = this.__consume__predicated_atom();
        if (address0) {
        } else {
          this._offset = index1;
          address0 = this.__consume__reference_expression();
          if (address0) {
          } else {
            this._offset = index1;
            address0 = this.__consume__string_expression();
            if (address0) {
            } else {
              this._offset = index1;
              address0 = this.__consume__ci_string_expression();
              if (address0) {
              } else {
                this._offset = index1;
                address0 = this.__consume__any_char_expression();
                if (address0) {
                } else {
                  this._offset = index1;
                  address0 = this.__consume__char_class_expression();
                  if (address0) {
                  } else {
                    this._offset = index1;
                  }
                }
              }
            }
          }
        }
      }
      return this._nodeCache["atom"][index0] = address0;
    },
    __consume__predicated_atom: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["predicated_atom"] = this._nodeCache["predicated_atom"] || {};
      var cached = this._nodeCache["predicated_atom"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var index2 = this._offset;
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 1);
      } else {
        slice0 = null;
      }
      if (slice0 === "&") {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0("&", this._offset, []);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += 1;
      } else {
        address1 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"&\""};
        }
      }
      if (address1) {
      } else {
        this._offset = index2;
        var slice2 = null;
        if (this._input.length > this._offset) {
          slice2 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice2 = null;
        }
        if (slice2 === "!") {
          var klass1 = this.constructor.SyntaxNode;
          var type1 = null;
          address1 = new klass1("!", this._offset, []);
          if (typeof type1 === "object") {
            extend(address1, type1);
          }
          this._offset += 1;
        } else {
          address1 = null;
          var slice3 = null;
          if (this._input.length > this._offset) {
            slice3 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice3 = null;
          }
          if (!this.error || this.error.offset <= this._offset) {
            this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"!\""};
          }
        }
        if (address1) {
        } else {
          this._offset = index2;
        }
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        labelled0.predicate = address1;
        var address2 = null;
        address2 = this.__consume__atom();
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          labelled0.atom = address2;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass2 = this.constructor.SyntaxNode;
        var type2 = find(this.constructor, "Predicate");
        address0 = new klass2(text0, this._offset, elements0, labelled0);
        if (typeof type2 === "object") {
          extend(address0, type2);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["predicated_atom"][index0] = address0;
    },
    __consume__reference_expression: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["reference_expression"] = this._nodeCache["reference_expression"] || {};
      var cached = this._nodeCache["reference_expression"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      address1 = this.__consume__identifier();
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        labelled0.identifier = address1;
        var address2 = null;
        var index2 = this._offset;
        address2 = this.__consume__assignment();
        this._offset = index2;
        if (!(address2)) {
          var klass0 = this.constructor.SyntaxNode;
          var type0 = null;
          address2 = new klass0("", this._offset, []);
          if (typeof type0 === "object") {
            extend(address2, type0);
          }
          this._offset += 0;
        } else {
          address2 = null;
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass1 = this.constructor.SyntaxNode;
        var type1 = find(this.constructor, "Reference");
        address0 = new klass1(text0, this._offset, elements0, labelled0);
        if (typeof type1 === "object") {
          extend(address0, type1);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["reference_expression"][index0] = address0;
    },
    __consume__string_expression: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["string_expression"] = this._nodeCache["string_expression"] || {};
      var cached = this._nodeCache["string_expression"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 1);
      } else {
        slice0 = null;
      }
      if (slice0 === "\"") {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0("\"", this._offset, []);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += 1;
      } else {
        address1 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"\\\"\""};
        }
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address2 = null;
        var remaining0 = 0, index2 = this._offset, elements1 = [], text1 = "", address3 = true;
        while (address3) {
          var index3 = this._offset;
          var index4 = this._offset, elements2 = [], labelled1 = {}, text2 = "";
          var address4 = null;
          var slice2 = null;
          if (this._input.length > this._offset) {
            slice2 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice2 = null;
          }
          if (slice2 === "\\") {
            var klass1 = this.constructor.SyntaxNode;
            var type1 = null;
            address4 = new klass1("\\", this._offset, []);
            if (typeof type1 === "object") {
              extend(address4, type1);
            }
            this._offset += 1;
          } else {
            address4 = null;
            var slice3 = null;
            if (this._input.length > this._offset) {
              slice3 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice3 = null;
            }
            if (!this.error || this.error.offset <= this._offset) {
              this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"\\\\\""};
            }
          }
          if (address4) {
            elements2.push(address4);
            text2 += address4.textValue;
            var address5 = null;
            var slice4 = null;
            if (this._input.length > this._offset) {
              slice4 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice4 = null;
            }
            var temp0 = slice4;
            if (temp0 === null) {
              address5 = null;
              var slice5 = null;
              if (this._input.length > this._offset) {
                slice5 = this._input.substring(this._offset, this._offset + 1);
              } else {
                slice5 = null;
              }
              if (!this.error || this.error.offset <= this._offset) {
                this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "<any char>"};
              }
            } else {
              var klass2 = this.constructor.SyntaxNode;
              var type2 = null;
              address5 = new klass2(temp0, this._offset, []);
              if (typeof type2 === "object") {
                extend(address5, type2);
              }
              this._offset += 1;
            }
            if (address5) {
              elements2.push(address5);
              text2 += address5.textValue;
            } else {
              elements2 = null;
              this._offset = index4;
            }
          } else {
            elements2 = null;
            this._offset = index4;
          }
          if (elements2) {
            this._offset = index4;
            var klass3 = this.constructor.SyntaxNode;
            var type3 = null;
            address3 = new klass3(text2, this._offset, elements2, labelled1);
            if (typeof type3 === "object") {
              extend(address3, type3);
            }
            this._offset += text2.length;
          } else {
            address3 = null;
          }
          if (address3) {
          } else {
            this._offset = index3;
            var slice6 = null;
            if (this._input.length > this._offset) {
              slice6 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice6 = null;
            }
            if (slice6 && /^[^"]/.test(slice6)) {
              var klass4 = this.constructor.SyntaxNode;
              var type4 = null;
              address3 = new klass4(slice6, this._offset, []);
              if (typeof type4 === "object") {
                extend(address3, type4);
              }
              this._offset += 1;
            } else {
              address3 = null;
              var slice7 = null;
              if (this._input.length > this._offset) {
                slice7 = this._input.substring(this._offset, this._offset + 1);
              } else {
                slice7 = null;
              }
              if (!this.error || this.error.offset <= this._offset) {
                this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "[^\"]"};
              }
            }
            if (address3) {
            } else {
              this._offset = index3;
            }
          }
          if (address3) {
            elements1.push(address3);
            text1 += address3.textValue;
            remaining0 -= 1;
          }
        }
        if (remaining0 <= 0) {
          this._offset = index2;
          var klass5 = this.constructor.SyntaxNode;
          var type5 = null;
          address2 = new klass5(text1, this._offset, elements1);
          if (typeof type5 === "object") {
            extend(address2, type5);
          }
          this._offset += text1.length;
        } else {
          address2 = null;
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          var address6 = null;
          var slice8 = null;
          if (this._input.length > this._offset) {
            slice8 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice8 = null;
          }
          if (slice8 === "\"") {
            var klass6 = this.constructor.SyntaxNode;
            var type6 = null;
            address6 = new klass6("\"", this._offset, []);
            if (typeof type6 === "object") {
              extend(address6, type6);
            }
            this._offset += 1;
          } else {
            address6 = null;
            var slice9 = null;
            if (this._input.length > this._offset) {
              slice9 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice9 = null;
            }
            if (!this.error || this.error.offset <= this._offset) {
              this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"\\\"\""};
            }
          }
          if (address6) {
            elements0.push(address6);
            text0 += address6.textValue;
          } else {
            elements0 = null;
            this._offset = index1;
          }
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass7 = this.constructor.SyntaxNode;
        var type7 = find(this.constructor, "String");
        address0 = new klass7(text0, this._offset, elements0, labelled0);
        if (typeof type7 === "object") {
          extend(address0, type7);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["string_expression"][index0] = address0;
    },
    __consume__ci_string_expression: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["ci_string_expression"] = this._nodeCache["ci_string_expression"] || {};
      var cached = this._nodeCache["ci_string_expression"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 1);
      } else {
        slice0 = null;
      }
      if (slice0 === "`") {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0("`", this._offset, []);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += 1;
      } else {
        address1 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"`\""};
        }
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address2 = null;
        var remaining0 = 0, index2 = this._offset, elements1 = [], text1 = "", address3 = true;
        while (address3) {
          var index3 = this._offset;
          var index4 = this._offset, elements2 = [], labelled1 = {}, text2 = "";
          var address4 = null;
          var slice2 = null;
          if (this._input.length > this._offset) {
            slice2 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice2 = null;
          }
          if (slice2 === "\\") {
            var klass1 = this.constructor.SyntaxNode;
            var type1 = null;
            address4 = new klass1("\\", this._offset, []);
            if (typeof type1 === "object") {
              extend(address4, type1);
            }
            this._offset += 1;
          } else {
            address4 = null;
            var slice3 = null;
            if (this._input.length > this._offset) {
              slice3 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice3 = null;
            }
            if (!this.error || this.error.offset <= this._offset) {
              this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"\\\\\""};
            }
          }
          if (address4) {
            elements2.push(address4);
            text2 += address4.textValue;
            var address5 = null;
            var slice4 = null;
            if (this._input.length > this._offset) {
              slice4 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice4 = null;
            }
            var temp0 = slice4;
            if (temp0 === null) {
              address5 = null;
              var slice5 = null;
              if (this._input.length > this._offset) {
                slice5 = this._input.substring(this._offset, this._offset + 1);
              } else {
                slice5 = null;
              }
              if (!this.error || this.error.offset <= this._offset) {
                this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "<any char>"};
              }
            } else {
              var klass2 = this.constructor.SyntaxNode;
              var type2 = null;
              address5 = new klass2(temp0, this._offset, []);
              if (typeof type2 === "object") {
                extend(address5, type2);
              }
              this._offset += 1;
            }
            if (address5) {
              elements2.push(address5);
              text2 += address5.textValue;
            } else {
              elements2 = null;
              this._offset = index4;
            }
          } else {
            elements2 = null;
            this._offset = index4;
          }
          if (elements2) {
            this._offset = index4;
            var klass3 = this.constructor.SyntaxNode;
            var type3 = null;
            address3 = new klass3(text2, this._offset, elements2, labelled1);
            if (typeof type3 === "object") {
              extend(address3, type3);
            }
            this._offset += text2.length;
          } else {
            address3 = null;
          }
          if (address3) {
          } else {
            this._offset = index3;
            var slice6 = null;
            if (this._input.length > this._offset) {
              slice6 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice6 = null;
            }
            if (slice6 && /^[^`]/.test(slice6)) {
              var klass4 = this.constructor.SyntaxNode;
              var type4 = null;
              address3 = new klass4(slice6, this._offset, []);
              if (typeof type4 === "object") {
                extend(address3, type4);
              }
              this._offset += 1;
            } else {
              address3 = null;
              var slice7 = null;
              if (this._input.length > this._offset) {
                slice7 = this._input.substring(this._offset, this._offset + 1);
              } else {
                slice7 = null;
              }
              if (!this.error || this.error.offset <= this._offset) {
                this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "[^`]"};
              }
            }
            if (address3) {
            } else {
              this._offset = index3;
            }
          }
          if (address3) {
            elements1.push(address3);
            text1 += address3.textValue;
            remaining0 -= 1;
          }
        }
        if (remaining0 <= 0) {
          this._offset = index2;
          var klass5 = this.constructor.SyntaxNode;
          var type5 = null;
          address2 = new klass5(text1, this._offset, elements1);
          if (typeof type5 === "object") {
            extend(address2, type5);
          }
          this._offset += text1.length;
        } else {
          address2 = null;
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          var address6 = null;
          var slice8 = null;
          if (this._input.length > this._offset) {
            slice8 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice8 = null;
          }
          if (slice8 === "`") {
            var klass6 = this.constructor.SyntaxNode;
            var type6 = null;
            address6 = new klass6("`", this._offset, []);
            if (typeof type6 === "object") {
              extend(address6, type6);
            }
            this._offset += 1;
          } else {
            address6 = null;
            var slice9 = null;
            if (this._input.length > this._offset) {
              slice9 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice9 = null;
            }
            if (!this.error || this.error.offset <= this._offset) {
              this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"`\""};
            }
          }
          if (address6) {
            elements0.push(address6);
            text0 += address6.textValue;
          } else {
            elements0 = null;
            this._offset = index1;
          }
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass7 = this.constructor.SyntaxNode;
        var type7 = find(this.constructor, "CIString");
        address0 = new klass7(text0, this._offset, elements0, labelled0);
        if (typeof type7 === "object") {
          extend(address0, type7);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["ci_string_expression"][index0] = address0;
    },
    __consume__any_char_expression: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["any_char_expression"] = this._nodeCache["any_char_expression"] || {};
      var cached = this._nodeCache["any_char_expression"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 1);
      } else {
        slice0 = null;
      }
      if (slice0 === ".") {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = find(this.constructor, "AnyChar");
        address0 = new klass0(".", this._offset, []);
        if (typeof type0 === "object") {
          extend(address0, type0);
        }
        this._offset += 1;
      } else {
        address0 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\".\""};
        }
      }
      return this._nodeCache["any_char_expression"][index0] = address0;
    },
    __consume__char_class_expression: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["char_class_expression"] = this._nodeCache["char_class_expression"] || {};
      var cached = this._nodeCache["char_class_expression"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 1);
      } else {
        slice0 = null;
      }
      if (slice0 === "[") {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0("[", this._offset, []);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += 1;
      } else {
        address1 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"[\""};
        }
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address2 = null;
        var index2 = this._offset;
        var slice2 = null;
        if (this._input.length > this._offset) {
          slice2 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice2 = null;
        }
        if (slice2 === "^") {
          var klass1 = this.constructor.SyntaxNode;
          var type1 = null;
          address2 = new klass1("^", this._offset, []);
          if (typeof type1 === "object") {
            extend(address2, type1);
          }
          this._offset += 1;
        } else {
          address2 = null;
          var slice3 = null;
          if (this._input.length > this._offset) {
            slice3 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice3 = null;
          }
          if (!this.error || this.error.offset <= this._offset) {
            this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"^\""};
          }
        }
        if (address2) {
        } else {
          this._offset = index2;
          var klass2 = this.constructor.SyntaxNode;
          var type2 = null;
          address2 = new klass2("", this._offset, []);
          if (typeof type2 === "object") {
            extend(address2, type2);
          }
          this._offset += 0;
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
          var address3 = null;
          var remaining0 = 1, index3 = this._offset, elements1 = [], text1 = "", address4 = true;
          while (address4) {
            var index4 = this._offset;
            var index5 = this._offset, elements2 = [], labelled1 = {}, text2 = "";
            var address5 = null;
            var slice4 = null;
            if (this._input.length > this._offset) {
              slice4 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice4 = null;
            }
            if (slice4 === "\\") {
              var klass3 = this.constructor.SyntaxNode;
              var type3 = null;
              address5 = new klass3("\\", this._offset, []);
              if (typeof type3 === "object") {
                extend(address5, type3);
              }
              this._offset += 1;
            } else {
              address5 = null;
              var slice5 = null;
              if (this._input.length > this._offset) {
                slice5 = this._input.substring(this._offset, this._offset + 1);
              } else {
                slice5 = null;
              }
              if (!this.error || this.error.offset <= this._offset) {
                this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"\\\\\""};
              }
            }
            if (address5) {
              elements2.push(address5);
              text2 += address5.textValue;
              var address6 = null;
              var slice6 = null;
              if (this._input.length > this._offset) {
                slice6 = this._input.substring(this._offset, this._offset + 1);
              } else {
                slice6 = null;
              }
              var temp0 = slice6;
              if (temp0 === null) {
                address6 = null;
                var slice7 = null;
                if (this._input.length > this._offset) {
                  slice7 = this._input.substring(this._offset, this._offset + 1);
                } else {
                  slice7 = null;
                }
                if (!this.error || this.error.offset <= this._offset) {
                  this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "<any char>"};
                }
              } else {
                var klass4 = this.constructor.SyntaxNode;
                var type4 = null;
                address6 = new klass4(temp0, this._offset, []);
                if (typeof type4 === "object") {
                  extend(address6, type4);
                }
                this._offset += 1;
              }
              if (address6) {
                elements2.push(address6);
                text2 += address6.textValue;
              } else {
                elements2 = null;
                this._offset = index5;
              }
            } else {
              elements2 = null;
              this._offset = index5;
            }
            if (elements2) {
              this._offset = index5;
              var klass5 = this.constructor.SyntaxNode;
              var type5 = null;
              address4 = new klass5(text2, this._offset, elements2, labelled1);
              if (typeof type5 === "object") {
                extend(address4, type5);
              }
              this._offset += text2.length;
            } else {
              address4 = null;
            }
            if (address4) {
            } else {
              this._offset = index4;
              var slice8 = null;
              if (this._input.length > this._offset) {
                slice8 = this._input.substring(this._offset, this._offset + 1);
              } else {
                slice8 = null;
              }
              if (slice8 && /^[^\]]/.test(slice8)) {
                var klass6 = this.constructor.SyntaxNode;
                var type6 = null;
                address4 = new klass6(slice8, this._offset, []);
                if (typeof type6 === "object") {
                  extend(address4, type6);
                }
                this._offset += 1;
              } else {
                address4 = null;
                var slice9 = null;
                if (this._input.length > this._offset) {
                  slice9 = this._input.substring(this._offset, this._offset + 1);
                } else {
                  slice9 = null;
                }
                if (!this.error || this.error.offset <= this._offset) {
                  this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "[^\\]]"};
                }
              }
              if (address4) {
              } else {
                this._offset = index4;
              }
            }
            if (address4) {
              elements1.push(address4);
              text1 += address4.textValue;
              remaining0 -= 1;
            }
          }
          if (remaining0 <= 0) {
            this._offset = index3;
            var klass7 = this.constructor.SyntaxNode;
            var type7 = null;
            address3 = new klass7(text1, this._offset, elements1);
            if (typeof type7 === "object") {
              extend(address3, type7);
            }
            this._offset += text1.length;
          } else {
            address3 = null;
          }
          if (address3) {
            elements0.push(address3);
            text0 += address3.textValue;
            var address7 = null;
            var slice10 = null;
            if (this._input.length > this._offset) {
              slice10 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice10 = null;
            }
            if (slice10 === "]") {
              var klass8 = this.constructor.SyntaxNode;
              var type8 = null;
              address7 = new klass8("]", this._offset, []);
              if (typeof type8 === "object") {
                extend(address7, type8);
              }
              this._offset += 1;
            } else {
              address7 = null;
              var slice11 = null;
              if (this._input.length > this._offset) {
                slice11 = this._input.substring(this._offset, this._offset + 1);
              } else {
                slice11 = null;
              }
              if (!this.error || this.error.offset <= this._offset) {
                this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"]\""};
              }
            }
            if (address7) {
              elements0.push(address7);
              text0 += address7.textValue;
            } else {
              elements0 = null;
              this._offset = index1;
            }
          } else {
            elements0 = null;
            this._offset = index1;
          }
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass9 = this.constructor.SyntaxNode;
        var type9 = find(this.constructor, "CharClass");
        address0 = new klass9(text0, this._offset, elements0, labelled0);
        if (typeof type9 === "object") {
          extend(address0, type9);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["char_class_expression"][index0] = address0;
    },
    __consume__label: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["label"] = this._nodeCache["label"] || {};
      var cached = this._nodeCache["label"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      address1 = this.__consume__identifier();
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        labelled0.identifier = address1;
        var address2 = null;
        var slice0 = null;
        if (this._input.length > this._offset) {
          slice0 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice0 = null;
        }
        if (slice0 === ":") {
          var klass0 = this.constructor.SyntaxNode;
          var type0 = null;
          address2 = new klass0(":", this._offset, []);
          if (typeof type0 === "object") {
            extend(address2, type0);
          }
          this._offset += 1;
        } else {
          address2 = null;
          var slice1 = null;
          if (this._input.length > this._offset) {
            slice1 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice1 = null;
          }
          if (!this.error || this.error.offset <= this._offset) {
            this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\":\""};
          }
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass1 = this.constructor.SyntaxNode;
        var type1 = null;
        address0 = new klass1(text0, this._offset, elements0, labelled0);
        if (typeof type1 === "object") {
          extend(address0, type1);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["label"][index0] = address0;
    },
    __consume__object_identifier: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["object_identifier"] = this._nodeCache["object_identifier"] || {};
      var cached = this._nodeCache["object_identifier"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      address1 = this.__consume__identifier();
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        labelled0.identifier = address1;
        var address2 = null;
        var remaining0 = 0, index2 = this._offset, elements1 = [], text1 = "", address3 = true;
        while (address3) {
          var index3 = this._offset, elements2 = [], labelled1 = {}, text2 = "";
          var address4 = null;
          var slice0 = null;
          if (this._input.length > this._offset) {
            slice0 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice0 = null;
          }
          if (slice0 === ".") {
            var klass0 = this.constructor.SyntaxNode;
            var type0 = null;
            address4 = new klass0(".", this._offset, []);
            if (typeof type0 === "object") {
              extend(address4, type0);
            }
            this._offset += 1;
          } else {
            address4 = null;
            var slice1 = null;
            if (this._input.length > this._offset) {
              slice1 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice1 = null;
            }
            if (!this.error || this.error.offset <= this._offset) {
              this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\".\""};
            }
          }
          if (address4) {
            elements2.push(address4);
            text2 += address4.textValue;
            var address5 = null;
            address5 = this.__consume__identifier();
            if (address5) {
              elements2.push(address5);
              text2 += address5.textValue;
              labelled1.identifier = address5;
            } else {
              elements2 = null;
              this._offset = index3;
            }
          } else {
            elements2 = null;
            this._offset = index3;
          }
          if (elements2) {
            this._offset = index3;
            var klass1 = this.constructor.SyntaxNode;
            var type1 = null;
            address3 = new klass1(text2, this._offset, elements2, labelled1);
            if (typeof type1 === "object") {
              extend(address3, type1);
            }
            this._offset += text2.length;
          } else {
            address3 = null;
          }
          if (address3) {
            elements1.push(address3);
            text1 += address3.textValue;
            remaining0 -= 1;
          }
        }
        if (remaining0 <= 0) {
          this._offset = index2;
          var klass2 = this.constructor.SyntaxNode;
          var type2 = null;
          address2 = new klass2(text1, this._offset, elements1);
          if (typeof type2 === "object") {
            extend(address2, type2);
          }
          this._offset += text1.length;
        } else {
          address2 = null;
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass3 = this.constructor.SyntaxNode;
        var type3 = null;
        address0 = new klass3(text0, this._offset, elements0, labelled0);
        if (typeof type3 === "object") {
          extend(address0, type3);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["object_identifier"][index0] = address0;
    },
    __consume__identifier: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["identifier"] = this._nodeCache["identifier"] || {};
      var cached = this._nodeCache["identifier"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset, elements0 = [], labelled0 = {}, text0 = "";
      var address1 = null;
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 1);
      } else {
        slice0 = null;
      }
      if (slice0 && /^[a-zA-Z_$]/.test(slice0)) {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address1 = new klass0(slice0, this._offset, []);
        if (typeof type0 === "object") {
          extend(address1, type0);
        }
        this._offset += 1;
      } else {
        address1 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "[a-zA-Z_$]"};
        }
      }
      if (address1) {
        elements0.push(address1);
        text0 += address1.textValue;
        var address2 = null;
        var remaining0 = 0, index2 = this._offset, elements1 = [], text1 = "", address3 = true;
        while (address3) {
          var slice2 = null;
          if (this._input.length > this._offset) {
            slice2 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice2 = null;
          }
          if (slice2 && /^[a-zA-Z0-9_$]/.test(slice2)) {
            var klass1 = this.constructor.SyntaxNode;
            var type1 = null;
            address3 = new klass1(slice2, this._offset, []);
            if (typeof type1 === "object") {
              extend(address3, type1);
            }
            this._offset += 1;
          } else {
            address3 = null;
            var slice3 = null;
            if (this._input.length > this._offset) {
              slice3 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice3 = null;
            }
            if (!this.error || this.error.offset <= this._offset) {
              this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "[a-zA-Z0-9_$]"};
            }
          }
          if (address3) {
            elements1.push(address3);
            text1 += address3.textValue;
            remaining0 -= 1;
          }
        }
        if (remaining0 <= 0) {
          this._offset = index2;
          var klass2 = this.constructor.SyntaxNode;
          var type2 = null;
          address2 = new klass2(text1, this._offset, elements1);
          if (typeof type2 === "object") {
            extend(address2, type2);
          }
          this._offset += text1.length;
        } else {
          address2 = null;
        }
        if (address2) {
          elements0.push(address2);
          text0 += address2.textValue;
        } else {
          elements0 = null;
          this._offset = index1;
        }
      } else {
        elements0 = null;
        this._offset = index1;
      }
      if (elements0) {
        this._offset = index1;
        var klass3 = this.constructor.SyntaxNode;
        var type3 = null;
        address0 = new klass3(text0, this._offset, elements0, labelled0);
        if (typeof type3 === "object") {
          extend(address0, type3);
        }
        this._offset += text0.length;
      } else {
        address0 = null;
      }
      return this._nodeCache["identifier"][index0] = address0;
    },
    __consume__quantifier: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["quantifier"] = this._nodeCache["quantifier"] || {};
      var cached = this._nodeCache["quantifier"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var index1 = this._offset;
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 1);
      } else {
        slice0 = null;
      }
      if (slice0 === "?") {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address0 = new klass0("?", this._offset, []);
        if (typeof type0 === "object") {
          extend(address0, type0);
        }
        this._offset += 1;
      } else {
        address0 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"?\""};
        }
      }
      if (address0) {
      } else {
        this._offset = index1;
        var slice2 = null;
        if (this._input.length > this._offset) {
          slice2 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice2 = null;
        }
        if (slice2 === "*") {
          var klass1 = this.constructor.SyntaxNode;
          var type1 = null;
          address0 = new klass1("*", this._offset, []);
          if (typeof type1 === "object") {
            extend(address0, type1);
          }
          this._offset += 1;
        } else {
          address0 = null;
          var slice3 = null;
          if (this._input.length > this._offset) {
            slice3 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice3 = null;
          }
          if (!this.error || this.error.offset <= this._offset) {
            this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"*\""};
          }
        }
        if (address0) {
        } else {
          this._offset = index1;
          var slice4 = null;
          if (this._input.length > this._offset) {
            slice4 = this._input.substring(this._offset, this._offset + 1);
          } else {
            slice4 = null;
          }
          if (slice4 === "+") {
            var klass2 = this.constructor.SyntaxNode;
            var type2 = null;
            address0 = new klass2("+", this._offset, []);
            if (typeof type2 === "object") {
              extend(address0, type2);
            }
            this._offset += 1;
          } else {
            address0 = null;
            var slice5 = null;
            if (this._input.length > this._offset) {
              slice5 = this._input.substring(this._offset, this._offset + 1);
            } else {
              slice5 = null;
            }
            if (!this.error || this.error.offset <= this._offset) {
              this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "\"+\""};
            }
          }
          if (address0) {
          } else {
            this._offset = index1;
          }
        }
      }
      return this._nodeCache["quantifier"][index0] = address0;
    },
    __consume__space: function(input) {
      var address0 = null, index0 = this._offset;
      this._nodeCache["space"] = this._nodeCache["space"] || {};
      var cached = this._nodeCache["space"][index0];
      if (cached) {
        this._offset += cached.textValue.length;
        return cached;
      }
      var slice0 = null;
      if (this._input.length > this._offset) {
        slice0 = this._input.substring(this._offset, this._offset + 1);
      } else {
        slice0 = null;
      }
      if (slice0 && /^[\s\n\r\t]/.test(slice0)) {
        var klass0 = this.constructor.SyntaxNode;
        var type0 = null;
        address0 = new klass0(slice0, this._offset, []);
        if (typeof type0 === "object") {
          extend(address0, type0);
        }
        this._offset += 1;
      } else {
        address0 = null;
        var slice1 = null;
        if (this._input.length > this._offset) {
          slice1 = this._input.substring(this._offset, this._offset + 1);
        } else {
          slice1 = null;
        }
        if (!this.error || this.error.offset <= this._offset) {
          this.error = this.constructor.lastError = {input: this._input, offset: this._offset, expected: "[\\s\\n\\r\\t]"};
        }
      }
      return this._nodeCache["space"][index0] = address0;
    }
  };
  
  var Parser = function(input) {
    this._input = input;
    this._offset = 0;
    this._nodeCache = {};
  };
  
  Parser.prototype.parse = function() {
    var result = this.__consume__grammar();
    if (result && this._offset === this._input.length) {
      return result;
    }
    if (!(this.error)) {
      this.error = {input: this._input, offset: this._offset, expected: "<EOF>"};
    }
    var message = formatError(this.error);
    var error = new Error(message);
    throw error;
  };
  
  Parser.parse = function(input) {
    var parser = new Parser(input);
    return parser.parse();
  };
  
  extend(Parser.prototype, Grammar);
  
  var SyntaxNode = function(textValue, offset, elements, properties) {
    this.textValue = textValue;
    this.offset    = offset;
    this.elements  = elements || [];
    if (!properties) return;
    for (var key in properties) this[key] = properties[key];
  };
  
  SyntaxNode.prototype.forEach = function(block, context) {
    for (var i = 0, n = this.elements.length; i < n; i++) {
      block.call(context, this.elements[i], i);
    }
  };
  
  Parser.SyntaxNode = SyntaxNode;
  
  if (typeof require === "function" && typeof exports === "object") {
    exports.Grammar = Grammar;
    exports.Parser  = Parser;
    exports.parse   = Parser.parse;
    
    if (typeof Canopy !== "undefined") {
      Canopy.MetaGrammar = Grammar;
      Canopy.MetaGrammarParser = Parser;
      Canopy.MetaGrammarParser.formatError = formatError;
    }
  } else {
    var namespace = this;
    namespace = namespace.Canopy = namespace.Canopy || {};
    Canopy.MetaGrammar = Grammar;
    Canopy.MetaGrammarParser = Parser;
    Canopy.MetaGrammarParser.formatError = formatError;
  }
})();


Canopy.Builder = function(parent) {
  if (parent) {
    this._parent = parent;
    this._indentLevel = parent._indentLevel;
  } else {
    this._buffer = '';
    this._indentLevel = 0;
  }
  this._methodSeparator = '';
  this._varIndex = {};
};

Canopy.extend(Canopy.Builder.prototype, {
  serialize: function() {
    return this._buffer;
  },
  
  write: function(string) {
    if (this._parent) return this._parent.write(string);
    this._buffer += string;
  },
  
  indent_: function(block, context) {
    this._indentLevel += 1;
    block.call(context, this);
    this._indentLevel -= 1;
  },
  
  newline_: function() {
    this.write('\n');
    var i = this._indentLevel;
    while (i--) this.write('  ');
  },
  
  delimitField_: function() {
    this.write(this._methodSeparator);
    this._methodSeparator = ',';
  },
  
  line_: function(source) {
    this.newline_();
    this.write(source + ';');
  },
  
  input_: function() {
    return 'this._input';
  },
  
  offset_: function() {
    return 'this._offset';
  },
  
  slice_: function(length) {
    var slice = this.tempVar_('slice'), input = this.input_(), of = this.offset_();
    this.if_(input + '.length > ' + of, function(builder) {
      builder.line_(slice + ' = ' + input + '.substring(' + of + ', ' + of + ' + ' + length + ')');
    });
    this.else_(function(builder) {
      builder.line_(slice + ' = null');
    });
    return slice;
  },
  
  syntaxNode_: function(address, nodeType, expression, bump, elements, labelled) {
    elements = ', ' + (elements || '[]');
    labelled = labelled ? ', ' + labelled : '';
    
    var klass = this.tempVar_('klass', 'this.constructor.SyntaxNode'),
        type  = this.findType_(nodeType),
        of    = ', ' + this.offset_();
    
    this.line_(address + ' = new ' + klass + '(' + expression + of + elements + labelled + ')');
    this.extendNode_(address, type);
    this.line_(this.offset_() + ' += ' + bump);
  },
  
  findType_: function(nodeType) {
    if (nodeType)
      return this.tempVar_('type', 'find(this.constructor, "' + nodeType + '")');
    else
      return this.tempVar_('type', 'null');
  },
  
  extendNode_: function(address, nodeType) {
    if (!nodeType) return;
    this.if_('typeof ' + nodeType + ' === "object"', function(builder) {
      builder.line_('extend(' + address + ', ' + nodeType + ')');
    });
  },
  
  failure_: function(address, expected) {
    this.line_(address + ' = null');
    var input = this.input_(), of = this.offset_(), slice = this.slice_(1);
    var error = 'this.error = this.constructor.lastError';
    expected = expected.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
    this.if_('!this.error || this.error.offset <= ' + of, function(builder) {
      builder.line_(error + ' = {input: ' + input +
                              ', offset: ' + of +
                              ', expected: "' + expected + '"}');
    });
  },
  
  namespace_: function(objectName) {
    var parts = objectName.split('.');
    this.var_('namespace', 'this');
    for (var i = 0, n = parts.length; i < n - 1; i++)
      this.line_('namespace = namespace.' + parts[i] + ' = namespace.' + parts[i] + ' || {}');
  },
  
  closure_: function(block, context) {
    this.write('(function() {');
    new Canopy.Builder(this).indent_(block, context);
    this.newline_();
    this.write('})();');
    this.newline_();
    this.newline_();
  },
  
  function_: function(name, args, block, context) {
    this.newline_();
    this.write(name + ' = function(' + args.join(', ') + ') {');
    new Canopy.Builder(this).indent_(block, context);
    this.newline_();
    this.write('};');
    this.newline_();
  },
  
  module_: function(name, block, context) {
    this.newline_();
    this.write(name + ' = {');
    new Canopy.Builder(this).indent_(block, context);
    this.newline_();
    this.write('};');
  },
  
  field_: function(name, value) {
    this.delimitField_();
    this.newline_();
    this.write(name + ': ' + value);
  },
  
  method_: function(name, args, block, context) {
    this.delimitField_();
    this.newline_();
    this.write(name + ': function(' + args.join(', ') + ') {');
    this._varIndex = {};
    this.indent_(block, context);
    this.newline_();
    this.write('}');
  },
  
  ivar_: function(name, value) {
    this.line_('this._' + name + ' = ' + value);
  },
  
  var_: function() {
    for (var i = 0, n = arguments.length; i < n; i += 2)
      this.line_('var ' + arguments[i] + ' = ' + arguments[i+1]);
  },
  
  tempVar_: function(name, value) {
    this._varIndex[name] = this._varIndex[name] || 0;
    var varName = name + this._varIndex[name];
    this._varIndex[name] += 1;
    this.var_(varName, (value === undefined) ? 'null' : value);
    return varName;
  },
  
  tempVars_: function(vars) {
    var names = {}, code = [], varName;
    for (var name in vars) {
      this._varIndex[name] = this._varIndex[name] || 0;
      varName = name + this._varIndex[name];
      this._varIndex[name] += 1;
      code.push(varName + ' = ' + vars[name]);
      names[name] = varName;
    }
    this.line_('var ' + code.join(', '));
    return names;
  },
  
  conditional_: function(kwd, condition, block, context) {
    this.newline_();
    this.write(kwd + ' (' + condition + ') {');
    this.indent_(block, context);
    this.newline_();
    this.write('}');
  },
  
  for_: function(condition, block, context) {
    this.conditional_('for', condition, block, context);
  },
  
  while_: function(condition, block, context) {
    this.conditional_('while', condition, block, context);
  },
  
  if_: function(condition, block, context) {
    this.conditional_('if', condition, block, context);
  },
  
  unless_: function(condition, block, context) {
    this.conditional_('if', '!(' + condition + ')', block, context);
  },
  
  else_: function(block, context) {
    this.write(' else {');
    this.indent_(block, context);
    this.newline_();
    this.write('}');
  },
  
  return_: function(expression) {
    this.line_('return ' + expression);
  }
});


Canopy.Compiler = function(grammarText) {
  this._grammarText = grammarText;
};

Canopy.extend(Canopy.Compiler.prototype, {
  parseTree: function() {
    if (this._tree) return this._tree;
    var P = Canopy.MetaGrammarParser, message;
    
    this._tree = P.parse(this._grammarText);
    if (this._tree) return this._tree;
    
    message = P.formatError(P.lastError);
    throw new Error(message);
  },
  
  toSexp: function(tree) {
    return this.parseTree().toSexp();
  },
  
  toSource: function() {
    var builder = new Canopy.Builder();
    this.parseTree().compile(builder);
    return builder.serialize();
  }
});


Canopy.Compiler.Grammar = {
  grammarName: function() {
    return this.grammar_name.object_identifier.textValue
  },
  
  toSexp: function() {
    var sexp = ['grammar', this.grammarName()];
    this.rules.forEach(function(rule) {
      sexp.push(rule.grammar_rule.toSexp());
    });
    return sexp;
  },
  
  compile: function(builder) {
    builder.closure_(function(builder) {
      builder.line_('var extend = ' + Canopy.extend.toString());
      builder.newline_();
      builder.line_('var find = ' + Canopy.find.toString());
      builder.newline_();
      builder.line_('var formatError = ' + Canopy.formatError.toString());
      builder.newline_();
      
      builder.module_('var Grammar', function(builder) {
        this.rules.forEach(function(rule) {
          rule.grammar_rule.compile(builder);
        });
      }, this);
      builder.newline_();
      
      var grammar   = this.grammarName(),
          parser    = this.grammarName() + 'Parser',
          namespace = /\./.test(grammar) ? grammar.replace(/\.[^\.]+$/g, '').split('.') : [],
          root      = this.rules.elements[0].grammar_rule.name();
      
      builder.function_('var Parser', ['input'], function(builder) {
        builder.ivar_('input', 'input');
        builder.ivar_('offset', '0');
        builder.ivar_('nodeCache', '{}');
      });
      builder.function_('Parser.prototype.parse', [], function(builder) {
        var input = builder.input_(),
            of    = builder.offset_();
        
        builder.var_('result', 'this.__consume__' + root + '()');
        
        builder.if_('result && ' + of + ' === ' + input + '.length', function(builder) {
          builder.return_('result');
        });
        builder.unless_('this.error', function(builder) {
          builder.line_('this.error = {input: ' + input + ', offset: ' + of + ', expected: "<EOF>"}');
        });
        builder.var_('message', 'formatError(this.error)');
        builder.var_('error', 'new Error(message)');
        builder.line_('throw error');
      });
      builder.function_('Parser.parse', ['input'], function(builder) {
        builder.var_('parser', 'new Parser(input)');
        builder.return_('parser.parse()');
      });
      builder.line_('extend(Parser.prototype, Grammar)');
      builder.newline_();
      
      builder.function_('var SyntaxNode', ['textValue', 'offset', 'elements', 'properties'], function(builder) {
        builder.line_('this.textValue = textValue');
        builder.line_('this.offset    = offset');
        builder.line_('this.elements  = elements || []');
        
        builder.line_('if (!properties) return');
        builder.line_('for (var key in properties) this[key] = properties[key]');
      });
      builder.function_('SyntaxNode.prototype.forEach', ['block', 'context'], function(builder) {
        builder.for_('var i = 0, n = this.elements.length; i < n; i++', function(builder) {
          builder.line_('block.call(context, this.elements[i], i)');
        });
      });
      builder.line_('Parser.SyntaxNode = SyntaxNode');
      
      var expose = function(builder) {
        builder.line_(grammar + ' = Grammar');
        builder.line_(parser  + ' = Parser');
        builder.line_(parser  + '.formatError = formatError');
      };
      
      var n = namespace.length, namespaceCondition;
      if (n > 0) {
        namespaceCondition = [];
        for (var i = 0; i < n; i++)
          namespaceCondition.push('typeof ' + namespace.slice(0,i+1).join('.') + ' !== "undefined"');
        namespaceCondition = namespaceCondition.join(' && ');
      }
      
      builder.newline_();
      builder.if_('typeof require === "function" && typeof exports === "object"', function(builder) {
        builder.line_('exports.Grammar = Grammar');
        builder.line_('exports.Parser  = Parser');
        builder.line_('exports.parse   = Parser.parse');
        builder.newline_();
        if (namespaceCondition)
          builder.if_(namespaceCondition, expose);
      });
      builder.else_(function(builder) {
        builder.namespace_(grammar);
        expose(builder);
      });
    }, this);
  }
};


Canopy.Compiler.GrammarRule = {
  name: function() {
    return this.identifier.textValue;
  },
  
  toSexp: function() {
    return ['rule', this.name(), this.parsing_expression.toSexp()];
  },
  
  compile: function(builder) {
    var name = this.name();
    
    builder.method_('__consume__' + name, ['input'], function() {
      var temp      = builder.tempVars_({address: 'null', index: builder.offset_()}),
          address   = temp.address,
          offset    = temp.index,
          cacheAddr = 'this._nodeCache["' + name + '"][' + offset + ']';
      
      builder.line_('this._nodeCache["' + name + '"] = this._nodeCache["' + name + '"] || {}');
      builder.var_('cached', cacheAddr);
      
      builder.if_('cached', function(builder) {
        builder.line_(builder.offset_() + ' += cached.textValue.length');
        builder.return_('cached');
      }, this);
      
      this.parsing_expression.compile(builder, address);
      
      builder.return_(cacheAddr + ' = ' + address);
    }, this);
  }
};


Canopy.Compiler.Choice = {
  expressions: function() {
    if (this._expressions) return this._expressions;
    this._expressions = [this.first_part];
    this.rest.forEach(function(choice) {
      this._expressions.push(choice.expression);
    }, this);
    return this._expressions;
  },
  
  toSexp: function() {
    var sexp = ['choice'];
    Canopy.forEach(this.expressions(), function(expression) {
      sexp.push(expression.toSexp());
    });
    return sexp;
  },
  
  compile: function(builder, address, nodeType) {
    var startOffset = builder.tempVar_('index', builder.offset_());
    this._compileChoices(builder, 0, address, nodeType, startOffset);
  },
  
  _compileChoices: function(builder, index, address, nodeType, startOffset) {
    var expressions = this.expressions();
    if (index === expressions.length) return;
    
    expressions[index].compile(builder, address);
    
    builder.if_(address, function(builder) {
      if (nodeType) {
        var type = builder.findType_(nodeType);
        builder.extendNode_(address, type);
      }
    });
    builder.else_(function(builder) {
      builder.line_(builder.offset_() + ' = ' + startOffset);
      this._compileChoices(builder, index + 1, address, nodeType, startOffset);
    }, this);
  }
};


Canopy.Compiler.ChoicePart = {
  nodeType: function() {
    var element = this.elements[1].type_expression;
    return element ? element.object_identifier.textValue : null;
  },
  
  toSexp: function() {
    var sexp = this.elements[0].toSexp(), type;
    if (type = this.nodeType()) sexp = ['type', type, sexp];
    return sexp;
  },
  
  compile: function(builder, address) {
    this.elements[0].compile(builder, address, this.nodeType());
  }
};


Canopy.Compiler.AnyChar = {
  toSexp: function() {
    return ['any-char'];
  },
  
  compile: function(builder, address, nodeType) {
    var temp = builder.tempVar_('temp', builder.slice_(1));
    
    builder.if_(temp + ' === null', function(builder) {
      builder.failure_(address, '<any char>');
    });
    builder.else_(function(builder) {
      builder.syntaxNode_(address, nodeType, temp, 1);
    });
  }
};


Canopy.Compiler.CharClass = {
  toSexp: function() {
    return ['char-class', this.textValue];
  },
  
  compile: function(builder, address, nodeType) {
    var regex  = '/^' + this.textValue + '/',
        slice  = builder.slice_(1);
    
    builder.if_(slice + ' && ' + regex + '.test(' + slice + ')', function(builder) {
      builder.syntaxNode_(address, nodeType, slice, 1);
    });
    builder.else_(function(builder) {
      builder.failure_(address, this.textValue);
    }, this);
  }
};


Canopy.Compiler.String = {
  toSexp: function() {
    return ['string', eval(this.textValue)];
  },
  
  compile: function(builder, address, nodeType) {
    var string = this.textValue,
        length = eval(this.textValue).length;
    
    builder.if_(builder.slice_(length) + ' === ' + string, function(builder) {
      builder.syntaxNode_(address, nodeType, string, length);
    });
    builder.else_(function(builder) {
      builder.failure_(address, this.textValue);
    }, this);
  }
};


Canopy.Compiler.CIString = {
  toSexp: function() {
    return ['ci-string', this.stringValue()];
  },
  
  compile: function(builder, address, nodeType) {
    var string = this.stringValue(),
        length = string.length,
        temp   = builder.tempVar_('temp', builder.slice_(length)),
        tlc    = '.toLowerCase()';
    
    builder.if_(temp + tlc + ' === "' + string + '"' + tlc, function(builder) {
      builder.syntaxNode_(address, nodeType, temp, length);
    });
    builder.else_(function(builder) {
      builder.failure_(address, this.textValue);
    }, this);
  },
  
  stringValue: function() {
    var string = '"' + this.elements[1].textValue + '"';
    return eval(string);
  }
};


Canopy.Compiler.Predicate = {
  atomic: function() {
    var expression = this.atom;
    return expression.parsing_expression || expression;
  },
  
  toSexp: function() {
    var expression = this.atomic(),
        table      = {'&': 'and', '!': 'not'},
        predicate  = table[this.predicate.textValue];
    
    return [predicate, expression.toSexp()];
  },
  
  compile: function(builder, address, nodeType) {
    var startOffset = builder.tempVar_('index', builder.offset_()),
        table       = {'&': 'if_', '!': 'unless_'},
        branch      = table[this.predicate.textValue];
    
    this.atomic().compile(builder, address);
    builder.line_(builder.offset_() + ' = ' + startOffset);
    
    builder[branch](address, function(builder) {
      builder.syntaxNode_(address, nodeType, '""', 0);
    });
    builder.else_(function(builder) {
      builder.line_(address + ' = null');
    });
  }
};


Canopy.Compiler.Repeat = {
  QUANTITIES: {'*': 0, '+': 1},
  
  atomic: function() {
    var expression = this.atom;
    return expression.parsing_expression || expression;
  },
  
  toSexp: function() {
    var expression = this.atomic(),
        sexp = expression.toSexp();
    
    sexp = expression.toSexp();
    switch (this.quantifier.textValue) {
      case '*': sexp = ['repeat', 0, sexp]; break;
      case '+': sexp = ['repeat', 1, sexp]; break;
      case '?': sexp = ['maybe', sexp]; break;
    }
    return sexp;
  },
  
  compile: function(builder, address, nodeType) {
    var quantifier  = this.quantifier.textValue;
    
    if (quantifier === '?') return this._compileMaybe(builder, address, nodeType);
    
    var minimum = this.QUANTITIES[quantifier],
        temp = builder.tempVars_({
          remaining: minimum,
          index:     builder.offset_(),
          elements:  '[]',
          text:      '""',
          address:   'true'
        }),
        
        remaining   = temp.remaining,
        startOffset = temp.index,
        elements    = temp.elements,
        textValue   = temp.text,
        elAddr      = temp.address;
    
    builder.while_(elAddr, function(builder) {
      this.atomic().compile(builder, elAddr);
      builder.if_(elAddr, function(builder) {
        builder.line_(elements + '.push(' + elAddr + ')');
        builder.line_(textValue + ' += ' + elAddr + '.textValue');
        builder.line_(remaining + ' -= 1');
      });
    }, this);
    
    builder.if_(remaining + ' <= 0', function(builder) {
      builder.line_(builder.offset_() + ' = ' + startOffset);
      builder.syntaxNode_(address, nodeType, textValue, textValue + '.length', elements);
    });
    builder.else_(function(builder) {
      builder.line_(address + ' = null');
    });
  },
  
  _compileMaybe: function(builder, address, nodeType) {
    var startOffset = builder.tempVar_('index', builder.offset_());
    this.atomic().compile(builder, address);
    
    builder.if_(address, function(builder) {
      if (nodeType) {
        var type = builder.findType_(nodeType);
        builder.extendNode_(address, type);
      }
    });
    builder.else_(function(builder) {
      builder.line_(builder.offset_() + ' = ' + startOffset);
      builder.syntaxNode_(address, nodeType, '""', 0);
    });
  }
};


Canopy.Compiler.Sequence = {
  expressions: function() {
    if (this._expressions) return this._expressions;
    this._expressions = [this.first_part];
    this.rest.forEach(function(part) {
      this._expressions.push(part.expression);
    }, this);
    return this._expressions;
  },
  
  toSexp: function() {
    var sexp = ['sequence'];
    Canopy.forEach(this.expressions(), function(expression) {
      sexp.push(expression.toSexp());
    });
    return sexp;
  },
  
  compile: function(builder, address, nodeType) {
    var temp = builder.tempVars_({
      index:    builder.offset_(),
      elements: '[]',
      labelled: '{}',
      text:     '""'
    });
    
    var startOffset = temp.index,
        elements    = temp.elements,
        labelled    = temp.labelled,
        textValue   = temp.text;
    
    this._compileExpressions(builder, 0, startOffset, elements, labelled, textValue);
    builder.if_(elements, function(builder) {
      builder.line_(builder.offset_() + ' = ' + startOffset);
      builder.syntaxNode_(address, nodeType, textValue, textValue + '.length', elements, labelled);
    });
    builder.else_(function(builder) {
      builder.line_(address + ' = null');
    });
  },
  
  _compileExpressions: function(builder, index, startOffset, elements, labelled, textValue) {
    var expressions = this.expressions();
    if (index === expressions.length) return;
    
    var expAddr = builder.tempVar_('address'),
        label   = expressions[index].label();
    
    expressions[index].compile(builder, expAddr);
    
    builder.if_(expAddr, function(builder) {
      builder.line_(elements + '.push(' + expAddr + ')');
      builder.line_(textValue + ' += ' + expAddr + '.textValue');
      if (label) builder.line_(labelled + '.' + label + ' = ' + expAddr);
      
      this._compileExpressions(builder, index + 1, startOffset, elements, labelled, textValue);
      
    }, this);
    builder.else_(function(builder) {
      builder.line_(elements + ' = null');
      builder.line_(builder.offset_() + ' = ' + startOffset);
    });
  }
};


Canopy.Compiler.SequencePart = {
  atomic: function() {
    var expression = this.expression;
    return expression.parsing_expression || expression;
  },
  
  label: function() {
    var element = this.elements[0].identifier,
        expression = this.atomic();
    
    if (element) return element.textValue;
    if (expression.referenceName) return expression.referenceName();
    
    return null;
  },
  
  toSexp: function() {
    var expression = this.atomic(),
        label = this.label(),
        sexp  = expression.toSexp();
    
    if (element = this.elements[0].identifier)
      sexp = ['label', label, sexp];
    
    return sexp;
  },
  
  compile: function(builder, address, nodeType) {
    return this.atomic().compile(builder, address, nodeType);
  }
};


Canopy.Compiler.Reference = {
  referenceName: function() {
    return this.identifier.textValue;
  },
  
  toSexp: function() {
    return ['reference', this.referenceName()];
  },
  
  compile: function(builder, address, nodeType) {
    builder.line_(address + ' = this.__consume__' + this.referenceName() + '()');
    if (nodeType) {
      var type = builder.findType_(nodeType);
      builder.extendNode_(address, type);
    }
  }
};


(function() {
  for (var type in Canopy.Compiler) {
    if (/^[A-Z]/.test(type))
      Canopy.MetaGrammarParser[type] = Canopy.Compiler[type];
  }
  
  if (typeof exports === 'object') {
    module.exports = exports;
    Canopy.extend(exports, Canopy);
    exports.compile = Canopy.compile;
  }
})();

